import logging
from typing import List

import requests
from django.conf import settings

from apps.search.api import celery_async_requests
from apps.search.api.base_search import BaseSearch
from apps.search.exceptions import TooManyRequests, RecordIsNotExists
from apps.search.models import GeneralizedHitsSearch, HitAuthor, File, RelatedIdentifier

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


class Zenodo(BaseSearch):

    def __int__(self):
        self.zenodo_access_token: str = settings.ZENODO_ACCESS_TOKEN
        self.size: int = 50

    def _get_zenodo_async_tasks(self, total_pages: int, query: str, sort: str):
        """ create async request to zenodo """
        if sort not in ('bestmatch', 'mostrecent'):
            sort = 'bestmatch'
        async_tasks = []
        for page in range(1, total_pages + 1):
            params = {'q': query,
                      'access_token': self.zenodo_access_token,
                      'page': page,
                      'sort': sort}
            async_tasks.append(celery_async_requests.get.delay(url='https://zenodo.org/api/records', params=params))

        return async_tasks

    @staticmethod
    def _request_to_single_zenodo_hit(hit_id: str) -> dict:
        response = requests.get(f'https://zenodo.org/api/records/{hit_id}')
        if response.status_code == 200:
            return response.json()
        else:
            raise RecordIsNotExists

    def _parse_one_zenodo_hit(self, hit_json, query: str = '') -> GeneralizedHitsSearch:  # TODO: set input type
        """ parse one json to generalized model """
        hit = GeneralizedHitsSearch()
        hit.query = query
        hit.source = 'zenodo'
        hit.source_id = hit_json['id']
        hit.title = hit_json['metadata']['title']

        description = self._remove_tags(hit_json['metadata']['description']).replace('\n', ' ')
        if len(description) > 255:
            hit.description = description[:255] + '...'
        else:
            hit.description = description

        hit.full_text = description

        hit.publication_date = hit_json['metadata']['publication_date']
        try:
            for keyword in hit_json['metadata']['keywords']:
                hit.source_keywords.append(keyword)
        except KeyError:
            pass
        hit.original_url = hit_json['links']['latest_html']
        hit.access_right = hit_json['metadata']['access_right']
        hit.doi = hit_json['doi']
        try:
            hit.language = hit_json['metadata']['language']
        except KeyError:
            pass
        hit.type = hit_json['metadata']['resource_type']['type']

        hit.save()

        if 'related_identifiers' in hit_json['metadata']:
            for related_identifier in hit_json['metadata']['related_identifiers']:
                identifier = RelatedIdentifier()
                identifier.scheme = related_identifier['scheme']
                identifier.identifier = related_identifier['identifier']
                identifier.save()

                hit.related_identifiers.add(identifier)

        for hit_author in hit_json['metadata']['creators']:
            author = HitAuthor()
            try:
                author.affiliation = hit_author['affiliation']
            except KeyError:
                pass
            author.name = hit_author['name']
            author.save()

            hit.authors.add(author)
            # hit.authors.append(author)

        # hit.auto_generated_keywords = self._get_autogenerated_keywords(f'{hit.title}\n{hit.description}')
        if 'files' in hit_json.keys():
            for hit_file in hit_json['files']:
                file = File()
                file.checksum = hit_file['checksum']
                file.key = hit_file['key']
                file.link = hit_file['links']['self']
                file.size = int(hit_file['size'])
                file.type = hit_file['type']
                file.save()

                hit.files.add(file)

        return hit

    def _get_zenodo_hits(self, api_response, query: str) -> List[GeneralizedHitsSearch]:
        if 'hits' not in api_response.keys():
            raise TooManyRequests
        return [self._parse_one_zenodo_hit(zenodo_hit, query=query) for zenodo_hit in api_response['hits']['hits']]

    def get_single_zenodo_hit(self, hit_id) -> GeneralizedHitsSearch:
        return self._parse_one_zenodo_hit(self._request_to_single_zenodo_hit(hit_id))
