from typing import List

from django.conf import settings

from apps.search.api import celery_async_requests
from apps.search.api.base_search import BaseSearch
from apps.search.models import GeneralizedHit, Author, GeneralizedHitsSearch, HitAuthor


class Zenodo(BaseSearch):

    def __int__(self):
        self.zenodo_access_token: str = settings.ZENODO_ACCESS_TOKEN
        self.size: int = 50

    def _get_zenodo_async_tasks(self, total_pages: int, query: str):
        """ create async request to zenodo """
        async_tasks = []
        for page in range(1, total_pages + 1):
            params = {'q': query,
                      'access_token': self.zenodo_access_token,
                      'page': page}
            async_tasks.append(celery_async_requests.get.delay(url='https://zenodo.org/api/records', params=params))

        return async_tasks

    def _parse_one_zenodo_hit(self, hit_json, query: str) -> GeneralizedHit:  # TODO: set input type
        """ parse one json to generalized model """
        hit = GeneralizedHitsSearch()
        hit.query = query
        hit.source = 'zenodo'
        hit.source_id = hit_json['id']
        hit.title = hit_json['metadata']['title']
        hit.description = self._remove_tags(hit_json['metadata']['description']).replace('\n', ' ')
        hit.publication_date = hit_json['metadata']['publication_date']
        try:
            for keyword in hit_json['metadata']['keywords']:
                hit.source_keywords.append(keyword)
        except KeyError:
            pass
        hit.original_url = hit_json['links']['latest_html']
        hit.access_right = hit_json['metadata']['access_right']
        hit.doi = hit_json['doi']
        try:
            hit.language = hit_json['metadata']['language']
        except KeyError:
            pass
        hit.type = hit_json['metadata']['resource_type']['type']

        hit.save()

        for hit_author in hit_json['metadata']['creators']:
            author = HitAuthor()
            try:
                author.affiliation = hit_author['affiliation']
            except KeyError:
                pass
            author.name = hit_author['name']
            author.save()

            hit.authors.add(author)
            # hit.authors.append(author)

        # hit.auto_generated_keywords = self._get_autogenerated_keywords(f'{hit.title}\n{hit.description}')
        return hit

    def _get_zenodo_hits(self, api_response, query: str) -> List[GeneralizedHit]:  # TODO: set response type
        return [self._parse_one_zenodo_hit(zenodo_hit, query=query) for zenodo_hit in api_response['hits']['hits']]
