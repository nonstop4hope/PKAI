import json.decoder
import logging
import time
from asyncio import sleep
from typing import List

import requests.models
from celery.result import AsyncResult
from django.conf import settings

from apps.search.api import celery_async_requests
from apps.search.api.search import Search
from apps.search.celery_result import get_task_state_by_id
from apps.search.models import GeneralizedHit, Author


logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


class Core(Search):

    def __init__(self):
        super().__init__()
        self.access_token = settings.CORE_ACCESS_TOKEN
        self.size = 50

    def _get_core_async_responses(self, query: str, total_pages: int, records_per_query: int = 50) -> \
            List[requests.models.Response]:
        headers = {'Authorization': f'Bearer {self.access_token}'}
        async_tasks = []
        body = {'q': query,
                'offset': 0,
                'limit': records_per_query}
        async_tasks.append(celery_async_requests.post.delay(url='https://api.core.ac.uk/v3/search/works',
                                                                headers=headers, body=body))

        return [async_task.wait(interval=0.1) for async_task in async_tasks]

    def _parse_one_core_hit(self, hit_json) -> GeneralizedHit:  # TODO: access_right

        hit = GeneralizedHit()
        hit.source = 'core'
        hit.title = hit_json['title']

        if hit_json['abstract'] is not None:
            hit.description = self._remove_tags(hit_json['abstract']).replace('\n', ' ')
        else:
            hit.description = ''

        hit.publication_date = hit_json['publishedDate']
        display_links = list(filter(lambda x: x['type'] == 'display', hit_json['links']))
        if display_links:
            hit.original_url = display_links[0]['url']

        for hit_author in hit_json['authors']:
            author = Author()
            author.name = hit_author['name']
            hit.authors.append(author)

        hit.doi = hit_json['doi']
        hit.id = hit_json['id']
        hit.language = hit_json['language']['code']

        if len(hit_json['documentType']) > 0:
            hit.type = hit_json['documentType']

        # hit.auto_generated_keywords = self._get_autogenerated_keywords(f'{hit.title}\n{hit.description}')

        return hit

    def _get_core_hits(self, api_response) -> List[GeneralizedHit]:
        return [self._parse_one_core_hit(core_hit) for core_hit in api_response['results']]
