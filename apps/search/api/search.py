import re
from typing import List

from django.conf import settings
# from keybert import KeyBERT

# from apps.search.api.opencitations_api import OpencitationsAPI
# from apps.search.models import ApiResponse, GeneralizedHit, Author, CitationsShort


class Search:
    def __init__(self):
        self.zenodo_access_token = settings.ZENODO_ACCESS_TOKEN
        self.size = 100
        # self.kw_model = KeyBERT()
        # self.opencitations_api = OpencitationsAPI()

    @staticmethod
    def _remove_tags(text):
        """ remove html tags from hit description """
        tag_re = re.compile(r'<[^>]+>')
        return tag_re.sub('', text)

    # def _get_autogenerated_keywords(self, text):
    #     keywords = self.kw_model.extract_keywords(text)
    #     return [key[0] for key in keywords]

    # def _get_hits(self, api_response, source: int) -> List[GeneralizedHit]:  # TODO: set response type
    #     """
    #     parse zenodo response to generalized model
    #     source = 1 (Zenodo), 2 (Core)
    #     """
    #     hits = []
    #     if source == 1:
    #         for zenodo_hit in api_response.json()['hits']['hits']:
    #             hits.append(self._parse_one_zenodo_hit(zenodo_hit))
    #     elif source == 2:
    #         pass
    #     else:
    #         raise NotImplementedError
    #     doi_list = [hit.doi for hit in hits]
    #     citations = self.opencitations_api.get_citations_async(doi_list)
    #     for num, _ in enumerate(hits):
    #         hits[num].citations_number = citations[num].number
    #     return hits
    #
    # def get_zenodo_records_by_query_async(self, search_query: str, page_num: int = 5) -> ApiResponse:
    #     """ get records on request """
    #     response = ApiResponse()
    #     api_requests = (self._zenodo_request(page=page, query=search_query) for page in range(1, page_num + 1))
    #     api_responses = grequests.map(api_requests)
    #     for api_response in api_responses:
    #         response.hits += self._get_hits(api_response, 1)
    #     response.total_records = len(response.hits)
    #     return response

